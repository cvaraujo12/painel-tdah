-- Criar extensões necessárias
create extension if not exists "uuid-ossp";

-- Tabela de tarefas
create table public.tasks (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  priority text not null check (priority in ('baixa', 'média', 'alta')),
  tags text[] default '{}',
  category text not null,
  completed boolean default false,
  due_date timestamp with time zone,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  user_id uuid references auth.users not null
);

-- Tabela de notas
create table public.notes (
  id bigint generated by default as identity primary key,
  title text not null,
  content text not null,
  tags text[] default '{}',
  category text not null,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  user_id uuid references auth.users not null
);

-- Tabela de metas
create table public.goals (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  target_date timestamp with time zone not null,
  progress numeric default 0,
  type text not null check (type in ('diária', 'semanal', 'mensal')),
  status text not null check (status in ('pendente', 'em_progresso', 'concluída')),
  priority text not null check (priority in ('baixa', 'média', 'alta')),
  tags text[] default '{}',
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  user_id uuid references auth.users not null
);

-- Tabela de subtarefas
create table public.subtasks (
  id bigint generated by default as identity primary key,
  goal_id bigint references public.goals on delete cascade not null,
  title text not null,
  completed boolean default false,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  user_id uuid references auth.users not null
);

-- Habilitar RLS
alter table public.tasks enable row level security;
alter table public.notes enable row level security;
alter table public.goals enable row level security;
alter table public.subtasks enable row level security;

-- Políticas para tasks
create policy "Usuários podem ver suas próprias tarefas"
  on public.tasks for select
  using (auth.uid() = user_id);

create policy "Usuários podem inserir suas próprias tarefas"
  on public.tasks for insert
  with check (auth.uid() = user_id);

create policy "Usuários podem atualizar suas próprias tarefas"
  on public.tasks for update
  using (auth.uid() = user_id);

create policy "Usuários podem deletar suas próprias tarefas"
  on public.tasks for delete
  using (auth.uid() = user_id);

-- Políticas para notas
create policy "Usuários podem ver suas próprias notas"
  on public.notes for select
  using (auth.uid() = user_id);

create policy "Usuários podem inserir suas próprias notas"
  on public.notes for insert
  with check (auth.uid() = user_id);

create policy "Usuários podem atualizar suas próprias notas"
  on public.notes for update
  using (auth.uid() = user_id);

create policy "Usuários podem deletar suas próprias notas"
  on public.notes for delete
  using (auth.uid() = user_id);

-- Políticas para goals
create policy "Usuários podem ver suas próprias metas"
  on public.goals for select
  using (auth.uid() = user_id);

create policy "Usuários podem inserir suas próprias metas"
  on public.goals for insert
  with check (auth.uid() = user_id);

create policy "Usuários podem atualizar suas próprias metas"
  on public.goals for update
  using (auth.uid() = user_id);

create policy "Usuários podem deletar suas próprias metas"
  on public.goals for delete
  using (auth.uid() = user_id);

-- Políticas para subtasks
create policy "Usuários podem ver subtarefas de suas metas"
  on public.subtasks for select
  using (exists (
    select 1 from public.goals
    where goals.id = subtasks.goal_id
    and goals.user_id = auth.uid()
  ));

create policy "Usuários podem inserir subtarefas em suas metas"
  on public.subtasks for insert
  with check (exists (
    select 1 from public.goals
    where goals.id = subtasks.goal_id
    and goals.user_id = auth.uid()
  ));

create policy "Usuários podem atualizar subtarefas de suas metas"
  on public.subtasks for update
  using (exists (
    select 1 from public.goals
    where goals.id = subtasks.goal_id
    and goals.user_id = auth.uid()
  ));

create policy "Usuários podem deletar subtarefas de suas metas"
  on public.subtasks for delete
  using (exists (
    select 1 from public.goals
    where goals.id = subtasks.goal_id
    and goals.user_id = auth.uid()
  ));

-- Funções auxiliares
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Triggers para atualizar updated_at
create trigger set_updated_at
  before update on public.tasks
  for each row
  execute function public.handle_updated_at();

create trigger set_updated_at
  before update on public.notes
  for each row
  execute function public.handle_updated_at();

create trigger set_updated_at
  before update on public.goals
  for each row
  execute function public.handle_updated_at();

create trigger set_updated_at
  before update on public.subtasks
  for each row
  execute function public.handle_updated_at(); 